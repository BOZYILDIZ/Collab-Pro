/**
 * Script pour initialiser des donn√©es de test dans la base de donn√©es
 * 
 * Ce script utilise l'utilisateur actuellement connect√© et cr√©e :
 * - Des √©quipes
 * - Des projets avec des t√¢ches
 * - Des notes
 * - Des √©v√©nements de calendrier
 * - Des messages de chat
 * 
 * Usage: Ex√©cuter via une route API ou directement
 */

import * as db from './db';

export async function seedDataForUser(userId: number, orgId: number) {
  console.log(`üå± D√©but de l'initialisation des donn√©es pour l'utilisateur ${userId}...`);

  try {
    // 1. Cr√©er des √©quipes
    console.log('üè¢ Cr√©ation des √©quipes...');
    const devTeamId = await db.createTeam({
      orgId,
      name: 'D√©veloppement',
      description: '√âquipe de d√©veloppement logiciel',
      color: '#3B82F6',
      createdBy: userId,
    });
    console.log(`  ‚úÖ √âquipe D√©veloppement cr√©√©e (ID: ${devTeamId})`);

    const marketingTeamId = await db.createTeam({
      orgId,
      name: 'Marketing',
      description: '√âquipe marketing et communication',
      color: '#10B981',
      createdBy: userId,
    });
    console.log(`  ‚úÖ √âquipe Marketing cr√©√©e (ID: ${marketingTeamId})`);

    // Ajouter l'utilisateur aux √©quipes
    await db.addTeamMember(devTeamId!, userId, 'leader');
    await db.addTeamMember(marketingTeamId!, userId, 'leader');
    console.log('  ‚úÖ Utilisateur ajout√© aux √©quipes');

    // 2. Cr√©er des projets
    console.log('üìÅ Cr√©ation des projets...');
    const projectId = await db.createProject({
      orgId,
      name: 'Plateforme Collaborative',
      description: 'D√©veloppement de la plateforme collaborative',
      status: 'active',
      startDate: new Date(),
      ownerId: userId,
    });
    console.log(`  ‚úÖ Projet cr√©√© (ID: ${projectId})`);

    // 3. Cr√©er des t√¢ches
    console.log('‚úÖ Cr√©ation des t√¢ches...');
    const taskTitles = [
      'Impl√©menter le syst√®me d\'authentification',
      'Cr√©er l\'interface du tableau de bord',
      'Configurer la base de donn√©es',
      'R√©diger la documentation',
      'Tester les fonctionnalit√©s',
    ];

    for (const title of taskTitles) {
      await db.createTask({
        projectId: projectId!,
        title,
        description: `Description de la t√¢che: ${title}`,
        status: 'todo',
        priority: 'medium',
        reporterId: userId,
        assigneeId: userId,
      });
    }
    console.log(`  ‚úÖ ${taskTitles.length} t√¢ches cr√©√©es`);

    // 4. Cr√©er des notes
    console.log('üìù Cr√©ation des notes...');
    const noteTitles = [
      'R√©union hebdomadaire',
      'Id√©es pour la nouvelle fonctionnalit√©',
      'Notes de formation',
      'Compte rendu r√©union client',
      'Plan de d√©veloppement Q1',
    ];

    for (const title of noteTitles) {
      await db.createNote({
        orgId,
        ownerId: userId,
        title,
        contentMarkdown: `# ${title}\n\nCeci est un exemple de note avec du contenu.\n\n## Points importants\n\n- Point 1\n- Point 2\n- Point 3`,
        isPublic: false,
      });
    }
    console.log(`  ‚úÖ ${noteTitles.length} notes cr√©√©es`);

    // 5. Cr√©er un calendrier et des √©v√©nements
    console.log('üìÖ Cr√©ation du calendrier et des √©v√©nements...');
    const calendarId = await db.createCalendar({
      orgId,
      ownerId: userId,
      name: 'Mon Calendrier',
      visibility: 'private',
      color: '#3B82F6',
    });

    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(10, 0, 0, 0);
    
    const nextWeek = new Date();
    nextWeek.setDate(nextWeek.getDate() + 7);
    nextWeek.setHours(14, 0, 0, 0);

    await db.createEvent({
      calendarId: calendarId!,
      title: 'R√©union d\'√©quipe',
      description: 'R√©union hebdomadaire de l\'√©quipe',
      startsAt: tomorrow,
      endsAt: new Date(tomorrow.getTime() + 60 * 60 * 1000), // 1 heure
      location: 'Salle de r√©union A',
      createdBy: userId,
    });

    await db.createEvent({
      calendarId: calendarId!,
      title: 'Sprint Planning',
      description: 'Planification du prochain sprint',
      startsAt: nextWeek,
      endsAt: new Date(nextWeek.getTime() + 2 * 60 * 60 * 1000), // 2 heures
      location: 'Bureau',
      createdBy: userId,
    });
    
    const dayAfterTomorrow = new Date(tomorrow);
    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 1);
    dayAfterTomorrow.setHours(15, 0, 0, 0);
    
    await db.createEvent({
      calendarId: calendarId!,
      title: 'Revue de code',
      description: 'Revue de code hebdomadaire',
      startsAt: dayAfterTomorrow,
      endsAt: new Date(dayAfterTomorrow.getTime() + 90 * 60 * 1000), // 1.5 heures
      location: 'En ligne',
      createdBy: userId,
    });
    console.log('  ‚úÖ Calendrier et 3 √©v√©nements cr√©√©s');

    // 6. Cr√©er un chat d'√©quipe
    console.log('üí¨ Cr√©ation du chat d\'√©quipe...');
    const chatId = await db.createChat({
      orgId,
      isGroup: true,
      name: '√âquipe Dev',
      createdBy: userId,
    });

    // Ajouter l'utilisateur au chat
    await db.addChatMember({ chatId: chatId!, userId });

    // Cr√©er quelques messages
    await db.createMessage({
      chatId: chatId!,
      senderId: userId,
      body: 'Bonjour √† tous ! Bienvenue dans le chat de l\'√©quipe.',
    });

    await db.createMessage({
      chatId: chatId!,
      senderId: userId,
      body: 'N\'h√©sitez pas √† partager vos id√©es et questions ici.',
    });
    
    await db.createMessage({
      chatId: chatId!,
      senderId: userId,
      body: 'Bonne journ√©e √† tous ! üöÄ',
    });
    console.log('  ‚úÖ Chat et 3 messages cr√©√©s');

    console.log('\n‚ú® Initialisation des donn√©es termin√©e avec succ√®s !');
    console.log('\nüìä R√©sum√© :');
    console.log(`  - 2 √©quipes`);
    console.log(`  - 1 projet avec ${taskTitles.length} t√¢ches`);
    console.log(`  - ${noteTitles.length} notes`);
    console.log(`  - 1 calendrier avec 3 √©v√©nements`);
    console.log(`  - 1 chat avec 3 messages`);

    return {
      success: true,
      data: {
        teams: [devTeamId, marketingTeamId],
        project: projectId,
        tasksCount: taskTitles.length,
        notesCount: noteTitles.length,
        calendar: calendarId,
        eventsCount: 3,
        chat: chatId,
        messagesCount: 3,
      }
    };

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation des donn√©es:', error);
    throw error;
  }
}

